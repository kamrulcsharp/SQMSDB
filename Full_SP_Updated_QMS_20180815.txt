CREATE OR REPLACE PROCEDURE    USP_AspNetRoles_SelectAll (
   po_cursor   OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_cursor FOR
      SELECT *
        FROM ASPNETROLES R;
END;
/


CREATE OR REPLACE PROCEDURE    USP_AspNetRoles_SelectByUserId (
   p_user_id       VARCHAR2,
   po_cursor   OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_cursor FOR
      SELECT R.*
        FROM ASPNETROLES R
             INNER JOIN ASPNETUSERROLES UR ON R.ID = UR.ROLEID
       WHERE UR.USERID = p_user_id;
END;
/


CREATE OR REPLACE PROCEDURE    USP_AspNetUserLogin_Delete (
    P_loginProvider IN VARCHAR2)
IS
BEGIN
   
      DELETE
        FROM ASPNETUSERLOGINS
      WHERE LOGINPROVIDER = P_loginProvider;
END;
/


CREATE OR REPLACE PROCEDURE    USP_AspNetUserLogin_Insert (
    P_LOGINPROVIDER IN VARCHAR2,
    P_PROVIDERKEY IN VARCHAR2,
    P_USERID IN VARCHAR2,
    po_PKValue         OUT NUMBER)
IS
BEGIN
   
      INSERT INTO ASPNETUSERLOGINS(LOGINPROVIDER,PROVIDERKEY,USERID)
      VALUES(P_LOGINPROVIDER, P_PROVIDERKEY, P_USERID);
      
      po_PKValue:=0;
END;
/


CREATE OR REPLACE PROCEDURE    USP_AspNetUser_SelectAll (
   po_cursor            OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT *
        FROM ASPNETUSERS;
END;
/


CREATE OR REPLACE PROCEDURE    USP_AspNetUser_SelectByToken (
   P_SecurityToken   IN     VARCHAR2,
   po_cursor            OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT USR.*
        FROM ASPNETUSERLOGINS login
        INNER JOIN  ASPNETUSERS usr ON login.USERID=USR.ID
       WHERE LOGINPROVIDER = P_SecurityToken;
END;
/


CREATE OR REPLACE PROCEDURE    USP_BranchUsers_SelectAll (
   po_cursor   OUT SYS_REFCURSOR)
IS
   quer   VARCHAR2 (500) := ' ';
BEGIN
   quer :=
      'select bu.user_branch_id, br.branch_id,br.branch_name,us.Hometown,us.UserName,ro.Name from tblBranchUser bu inner join AspNetUserRoles ur
on ur.UserId=bu.user_id
inner join AspNetRoles ro on ro.Id=ur.RoleId
inner join tblBranch br on br.branch_id=bu.branch_id
inner join AspNetUsers us on us.Id=bu.user_id';

   IF (quer IS NOT NULL)
   THEN
      OPEN po_cursor FOR quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
   END IF;
END;
/


CREATE OR REPLACE PROCEDURE USP_BranchUser_Insert
 
(
p_branch_id number,
 p_user_id varchar2 ,
po_PKValue out number)

IS
Begin
INSERT INTO tblbranchuser
           (branch_id,
           user_id
           )
           
     VALUES
           (p_branch_id,
           p_user_id);
         select USER_BRANCH_ID into po_PKValue from tblbranchuser
 where branch_id=p_branch_id and user_id=p_user_id ;      
End;
/


CREATE OR REPLACE PROCEDURE USP_Branch_Delete
 
(
p_branch_id number 
)

IS

BEGIN
      DELETE FROM tblbranch
      
           
     where branch_id=p_branch_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE    USP_Branch_Insert (
    P_BRANCH_NAME     VARCHAR2,
    P_ADDRESS         VARCHAR2,
    P_CONTACT_PERSON  VARCHAR2,
    P_CONTACT_NO      VARCHAR2,
    P_DISPLAY_NEXT    NUMBER,
    P_STATIC_IP       VARCHAR2,
    po_PKValue    OUT NUMBER)
IS
BEGIN
   INSERT INTO TBLBRANCH (
    BRANCH_NAME,
    ADDRESS,
    CONTACT_PERSON,
    CONTACT_NO,
    DISPLAY_NEXT,
    STATIC_IP)
   VALUES (
    P_BRANCH_NAME,
    P_ADDRESS,
    P_CONTACT_PERSON,
    P_CONTACT_NO,
    P_DISPLAY_NEXT,
    P_STATIC_IP);

   SELECT BRANCH_ID
     INTO po_PKValue
     FROM TBLBRANCH
    WHERE BRANCH_NAME = P_BRANCH_NAME;
END;
/


CREATE OR REPLACE PROCEDURE    USP_Branch_List_ById (
   p_branch_id       NUMBER,
   po_cursor     OUT SYS_REFCURSOR
   )
IS
BEGIN
   --open po_cursor for select * from tblservicetype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblbranch
       WHERE branch_id = p_branch_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_Branch_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='select * from tblbranch' ;
IF(quer IS NOT NULL) THEN
   open po_cursor for quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END IF;
END;
/


CREATE OR REPLACE PROCEDURE USP_Branch_Update
 
(p_branch_id number,p_branch_name varchar2,p_address varchar2, p_contact_no varchar2,
p_contact_person varchar2,p_display_next number, p_static_ip varchar2 default ' '
)

IS
Begin
Update  tblbranch
           set branch_name= p_branch_name,
           address= p_address,
           
           contact_no=p_contact_no,
           contact_person=p_contact_person,
           display_next=p_display_next,
           static_ip=p_static_ip
     where branch_id=p_branch_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE USP_BreakType_Delete
 
(
p_breakType_id number 
)
IS

BEGIN
      DELETE FROM tblBreakType
            
     where break_type_id=p_breakType_id;
            
End;
/


CREATE OR REPLACE PROCEDURE USP_BreakType_Insert
(p_break_type_name varchar2,p_break_type_short_name varchar2,p_duration number,
p_start_time date,p_end_time date
, po_PKValue out number)

IS
Begin
INSERT INTO tblBreakType
           (break_type_name,
           break_type_short_name,
           duration,
           start_time,
           end_time )
           
     VALUES
           (p_break_type_name,
           p_break_type_short_name,
           p_duration,
           p_start_time,
           p_end_time
           );  
       
 select break_type_id into po_PKValue from tblBreakType 
 where break_type_name=p_break_type_name and break_type_short_name= p_break_type_short_name and duration=p_duration and start_time = p_start_time and end_time= p_end_time;   
End;
/


CREATE OR REPLACE PROCEDURE    USP_BreakType_List_ById(
   p_breakType_id       NUMBER,
   po_cursor        OUT SYS_REFCURSOR
   )
IS
BEGIN
   OPEN po_cursor FOR
      SELECT *
        FROM tblBreakType
       WHERE break_type_id = p_breakType_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_BreakType_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='select * from tblBreakType' ;
IF(quer IS NOT NULL) THEN
   open po_cursor for quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END IF;
END;
/


CREATE OR REPLACE PROCEDURE    USP_BreakType_Update (
   p_breakType_id             NUMBER,
   p_break_type_name          VARCHAR2,
   p_break_type_short_name    VARCHAR2,
   p_duration                 NUMBER,
   p_start_time               DATE,
   p_end_time                 DATE
   )
IS
BEGIN
   UPDATE tblBreakType
      SET break_type_name = p_break_type_name,
          break_type_short_name = p_break_type_short_name,
          duration = p_duration,
          start_time = p_start_time,
          end_time = p_end_time
    WHERE break_type_id = p_breakType_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_Counters_Delete
 
(
p_Counter_id number 
)

IS

BEGIN
      DELETE FROM tblcounter
      
           
     where counter_id=p_Counter_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE USP_Counters_Insert
(p_location varchar2,p_counter_no varchar2,p_branch_id number

, po_PKValue out number)

IS
Begin


 
INSERT INTO tblcounter
           (counter_no,
           branch_id,
           location )
           
     VALUES
           (p_counter_no,
           p_branch_id,
           p_location
           );  
       
 select counter_id into po_PKValue from tblcounter 
 where counter_no=p_counter_no and branch_id= p_branch_id and location=p_location;   
End;
/


CREATE OR REPLACE PROCEDURE    USP_Counters_List_ById(
   p_Counter_id       NUMBER,
   po_cursor      OUT SYS_REFCURSOR
   )
IS
BEGIN
   --open po_cursor for select * from tblservicetype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblcounter
       WHERE counter_id = p_Counter_id;
END;
/


CREATE OR REPLACE PROCEDURE    USP_Counters_SelectAll (
   po_cursor   OUT SYS_REFCURSOR)
IS
   quer   VARCHAR2 (500) := ' ';
BEGIN
   quer :=
      'select con.counter_id,br.branch_id,BR.BRANCH_NAME,con.counter_no,con.location from tblCounter con inner join tblBranch br
on br.branch_id=con.branch_id';

   IF (quer IS NOT NULL)
   THEN
      OPEN po_cursor FOR quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
   END IF;
END;
/


CREATE OR REPLACE PROCEDURE USP_Counters_Update
 
(p_location varchar2,p_counter_no varchar2,p_branch_id number,
p_Counter_id number
)

IS
Begin
Update  tblcounter
           set counter_no = p_counter_no,
          branch_id=p_branch_id,
           location=p_location
     where counter_id = p_Counter_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE    USP_CustomerType_Delete (
   p_Customer_type_id    NUMBER)
IS
BEGIN
   DELETE FROM tblCustomerType
         WHERE Customer_type_id = p_Customer_type_id;
END;
/


CREATE OR REPLACE PROCEDURE    USP_CustomerType_Insert (
   p_customer_type_name       VARCHAR2,
   p_priority                NUMBER,
   po_PKValue            OUT NUMBER)
IS
BEGIN
   INSERT INTO tblCustomerType (customer_type_name, priority)
        VALUES (p_customer_type_name, p_priority);

   SELECT customer_type_id
     INTO po_PKValue
     FROM tblCustomerType
    WHERE customer_type_name = p_customer_type_name;
END;
/


CREATE OR REPLACE PROCEDURE    USP_CustomerType_List_ById(
   p_Customer_type_id       NUMBER,
   po_cursor           OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblCustomertype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblCustomerType
       WHERE Customer_type_id = p_Customer_type_id;
END;
/


CREATE OR REPLACE PROCEDURE    USP_CustomerType_SelectAll (
   po_cursor   OUT SYS_REFCURSOR)
IS
   quer   VARCHAR2 (500) := ' ';
BEGIN
   quer := 'select * from tblCustomertype';

   BEGIN
      OPEN po_cursor FOR SELECT * FROM tblCustomertype;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
   END;
END;
/


CREATE OR REPLACE PROCEDURE    USP_CustomerType_Update (
   p_Customer_type_id      NUMBER,
   p_Customer_type_name    VARCHAR2,
   p_priority    NUMBER
   )
IS
BEGIN
   UPDATE tblCustomerType
      SET Customer_type_name = p_Customer_type_name,
            priority = p_priority
    WHERE Customer_type_id = p_Customer_type_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_Customer_Insert
 
(p_customer_name varchar2,p_contact_no varchar2,p_address varchar2,p_customer_type_id number

, po_PKValue out number)

IS
Begin


 
INSERT INTO tblcustomer
           (customer_name,
           contact_no,
           address,
           customer_type_id
           )
           
     VALUES
           (p_customer_name,
           p_contact_no,
           p_address,
           1);  
       
 select customer_id into po_PKValue from tblcustomer 
 where customer_name=p_customer_name and contact_no= p_contact_no  and address=p_address ;   
End;
/


CREATE OR REPLACE PROCEDURE USP_Customer_List_ById (
   p_Customer_id       NUMBER,
   po_cursor           OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblCustomertype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblCustomer
       WHERE Customer_id = p_Customer_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_Customer_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='select cus.customer_id,cus.customer_name,cus.contact_no,cus.address,ct.customer_type_name from tblCustomer cus
 inner join tblCustomerType ct on ct.customer_type_id=cus.customer_type_id' ;
IF(quer IS NOT NULL) THEN
   open po_cursor for quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END IF;
END;
/


CREATE OR REPLACE PROCEDURE USP_Customer_Update
 
(p_customer_name varchar2,p_contact_no varchar2,p_address varchar2,p_customer_type_id number,
p_customer_id number
)

IS
Begin
Update  tblcustomer
           set customer_name = p_customer_name,
           contact_no = p_contact_no,
          
           address=p_address ,
           customer_type_id=p_customer_type_id
     where customer_id = p_customer_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE       USP_DailyBreak_Delete
 
(
p_dailyBreak_id number 
)
IS

BEGIN
      DELETE FROM tblDailyBreak
            
     where daily_break_id=p_dailyBreak_id;
            
End;
/


CREATE OR REPLACE PROCEDURE       USP_DailyBreak_Insert (
   p_break_type_id       NUMBER,
   p_counter_id          NUMBER,
   p_start_time          DATE,
   p_end_time            DATE,
   p_user_id             VARCHAR2,
   p_remarks             VARCHAR2,
   po_PKValue        OUT NUMBER)
IS
BEGIN
   INSERT INTO tblDailyBreak (break_type_id,
                              counter_id,
                              start_time,
                              user_id,
                              remarks,
                              create_time)
        VALUES (p_break_type_id,
                p_counter_id,
                '',
                p_user_id,
                p_remarks,
                sysdate);

   SELECT last_number
   INTO po_PKValue
    FROM user_sequences
    WHERE sequence_name = 'TBLDAILYBREAK_SEQ';
   
END;
/


CREATE OR REPLACE PROCEDURE       USP_DailyBreak_SelectAll (
   P_BRANCH_ID       NUMBER,
   P_USER_ID         VARCHAR2,
   po_cursor     OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT B.DAILY_BREAK_ID,
             BR.BRANCH_NAME,
             C.COUNTER_NO,
             U.HOMETOWN,
             T.BREAK_TYPE_NAME,
             B.START_TIME,
             B.END_TIME,
             B.REMARKS
        FROM TBLDAILYBREAK B
             INNER JOIN TBLBREAKTYPE T ON B.BREAK_TYPE_ID = T.BREAK_TYPE_ID
             INNER JOIN ASPNETUSERS U ON B.USER_ID = U.ID
             INNER JOIN TBLCOUNTER C ON B.COUNTER_ID = C.COUNTER_ID
             INNER JOIN TBLBRANCH BR ON C.BRANCH_ID = BR.BRANCH_ID
       WHERE        (P_BRANCH_ID IS NULL OR BR.BRANCH_ID = P_BRANCH_ID)
                AND (P_USER_ID IS NULL OR U.ID = P_USER_ID)
                AND TRUNC(B.START_TIME)=TRUNC(SYSDATE);
END;
/


CREATE OR REPLACE PROCEDURE       USP_DailyBreak_Update
 
(
p_user_id varchar2
)

IS
Begin
Update  tblDailyBreak
           set 
           start_time=sysdate
           
     where user_id=p_user_id
     AND start_time is null;
End;
/


CREATE OR REPLACE PROCEDURE       USP_DASHBOARD_ADMIN (
   po_cursor   OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_cursor FOR
      SELECT B.BRANCH_NAME, NVL(COUNT(TQ.TOKEN_ID),0) TOKENS
            , NVL(COUNT(SD.SERVICE_ID),0) SERVICES
        FROM TBLBRANCH B
        LEFT JOIN TBLTOKENQUEUE TQ 
            ON B.BRANCH_ID=TQ.BRANCH_ID
        LEFT JOIN TBLSERVICEDETAIL SD ON TQ.TOKEN_ID = SD.TOKEN_ID
        GROUP BY B.BRANCH_NAME;
END;
/


CREATE OR REPLACE PROCEDURE       USP_DASHBOARD_COUNTERS (
   P_BRANCH_ID   IN     NUMBER,
   po_CURSOR       OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_CURSOR FOR
        SELECT C.COUNTER_NO,
               NVL (COUNT (TQ.TOKEN_ID), 0) TOKENS,
               NVL (COUNT (SD.SERVICE_ID), 0) SERVICES
          FROM TBLCOUNTER C
               LEFT JOIN TBLTOKENQUEUE TQ ON C.COUNTER_ID = TQ.COUNTER_ID
               LEFT JOIN TBLSERVICEDETAIL SD ON TQ.TOKEN_ID = SD.TOKEN_ID
         WHERE C.BRANCH_ID = P_BRANCH_ID
      GROUP BY C.COUNTER_NO;

  
END;
/


CREATE OR REPLACE PROCEDURE       USP_DASHBOARD_STATUSES (
   P_BRANCH_ID   IN     NUMBER,
   po_CURSOR       OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_CURSOR FOR
        SELECT SS.SERVICE_STATUS, NVL (COUNT (TQ.TOKEN_ID), 0) TOKENS
          FROM TBLSERVICESTATUS SS
               LEFT JOIN TBLTOKENQUEUE TQ
                  ON SS.SERVICE_STATUS_ID = TQ.SERVICE_STATUS_ID
         WHERE TQ.BRANCH_ID = P_BRANCH_ID
      GROUP BY SS.SERVICE_STATUS;

  
END;
/


CREATE OR REPLACE PROCEDURE       USP_GetInProgressTokenList (
   -- Add the parameters for the stored procedure here
   p_branch_id       NUMBER,
   PO_CURSOR     OUT SYS_REFCURSOR)
AS
BEGIN
   -- SET NOCOUNT ON added to prevent extra result sets from
   -- interfering with SELECT statements.

   -- Insert statements for procedure here
   OPEN PO_CURSOR FOR
        SELECT b.static_ip,
           c.counter_no,
           NVL (TO_CHAR (t.token_no), 'ON') token_no
        FROM tblCounter c
           INNER JOIN tblBranch b ON c.branch_id = b.branch_id
           LEFT JOIN
           (SELECT T.COUNTER_ID, T.TOKEN_NO
            FROM tblTokenQueue T
            INNER JOIN 
            (
                SELECT counter_id, min(token_id) token_id
                  FROM tblTokenQueue
                WHERE service_status_id = 3 AND branch_id=p_branch_id
                    AND TRUNC (service_date) = TRUNC (SYSDATE)
                GROUP BY counter_id
            ) Q ON T.COUNTER_ID=Q.COUNTER_ID AND T.TOKEN_ID=Q.TOKEN_ID) t
              ON c.counter_id = t.counter_id
        WHERE b.branch_id = p_branch_id
        ORDER BY C.COUNTER_NO;
END;
/


CREATE OR REPLACE PROCEDURE    USP_GetNextTokenList (
   p_branch_id       NUMBER,
   PO_CURSOR     OUT SYS_REFCURSOR)
AS

BEGIN
    
   OPEN PO_CURSOR FOR
        SELECT b.static_ip, b.display_next, t.token_no
          FROM tblTokenQueue t
               INNER JOIN tblBranch b ON t.branch_id = b.branch_id
               LEFT JOIN TBLCUSTOMER CUST ON T.CONTACT_NO = CUST.CONTACT_NO
               LEFT JOIN TBLCUSTOMERTYPE CT ON CUST.CUSTOMER_TYPE_ID = CT.CUSTOMER_TYPE_ID
         WHERE     t.branch_id = p_branch_id
               AND service_status_id = 1
               AND TRUNC (service_date) = TRUNC (SYSDATE)
      ORDER BY NVL(CT.PRIORITY,99), t.token_no ASC;
END;
/


CREATE OR REPLACE PROCEDURE    USP_SENDSMS (
   P_MSISDN   IN     VARCHAR2,
   P_MESSAGE  IN     VARCHAR2)
IS
BEGIN
   INSERT INTO TBLSMSLOG(MSISDN, MESSAGE)
   VALUES(P_MSISDN, P_MESSAGE);
   
   -- ADD QUERY FOR SEND SMS 
   
   UPDATE TBLSMSLOG
   SET
        IS_SENT=1
   WHERE 
        MSISDN = P_MSISDN
        AND MESSAGE = P_MESSAGE;
END;
/


CREATE OR REPLACE PROCEDURE       USP_SERVICEDETAIL_ADDSERVICE (
   P_TOKEN_ID              IN     NUMBER,
   P_CONTACT_NO            IN     VARCHAR,
   P_START_TIME            IN     DATE,
   P_SERVICE_SUB_TYPE_ID   IN     NUMBER,
   P_ISSUES                IN     VARCHAR2,
   P_SOLUTIONS             IN     VARCHAR2,
   P_CUSTOMER_NAME         IN     VARCHAR2,
   P_ADDRESS               IN     VARCHAR2,
   P_COUNTER_ID            IN     NUMBER,
   P_USER_ID               IN     VARCHAR2,
   po_PKValue                 OUT NUMBER)
IS
   /******************************************************************************
      NAME:       USP_DAILYSERVICE_NEWCALL
      PURPOSE:    CALLING NEW CUSTOMER FOR SERVICE WITH NEW TOKEN

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/28/2018   KAMRUL       1. Created this procedure.
   ******************************************************************************/



   P_ROWCOUNT_CUSTOMER   NUMBER := 0;
   P_CUSTOMER_ID         NUMBER := 0;
BEGIN
   SELECT COUNT (1)
     INTO P_ROWCOUNT_CUSTOMER
     FROM TBLCUSTOMER C
    WHERE C.CONTACT_NO = P_CONTACT_NO;

   IF (P_ROWCOUNT_CUSTOMER > 0)
   THEN
      UPDATE TBLCUSTOMER
         SET customer_name = P_CUSTOMER_NAME, ADDRESS = P_ADDRESS
       WHERE CONTACT_NO = P_CONTACT_NO;
   ELSE
      INSERT INTO TBLCUSTOMER (customer_name,
                               ADDRESS,
                               CONTACT_NO,
                               customer_type_id)
           VALUES (P_CUSTOMER_NAME,
                   P_ADDRESS,
                   P_CONTACT_NO,
                   1);
   END IF;

   SELECT CUSTOMER_ID
     INTO P_CUSTOMER_ID
     FROM TBLCUSTOMER C
    WHERE C.CONTACT_NO = P_CONTACT_NO;

   UPDATE TBLTOKENQUEUE
      SET service_status_id = 5,
          contact_no = P_CONTACT_NO,
          COUNTER_ID = P_COUNTER_ID,
          USER_ID = P_USER_ID
    WHERE TOKEN_ID = P_TOKEN_ID;

   INSERT INTO TBLSERVICEDETAIL (token_id,
                                 customer_id,
                                 service_sub_type_id,
                                 issues,
                                 solutions,
                                 start_time,
                                 service_datetime,
                                 end_time)
        VALUES (P_TOKEN_ID,
                P_CUSTOMER_ID,
                P_SERVICE_SUB_TYPE_ID,
                P_ISSUES,
                P_SOLUTIONS,
                P_START_TIME,
                SYSDATE,
                SYSDATE);

   SELECT SERVICE_ID
     INTO po_PKValue
     FROM (  SELECT *
               FROM TBLSERVICEDETAIL
              WHERE TOKEN_ID = P_TOKEN_ID
           ORDER BY 1 DESC)
    WHERE ROWNUM <= 1;
END;
/


CREATE OR REPLACE PROCEDURE       USP_SERVICEDETAIL_INSERT (
   P_TOKEN_ID              IN     NUMBER,
   P_CONTACT_NO            IN     VARCHAR,
   P_START_TIME            IN     DATE,
   P_SERVICE_SUB_TYPE_ID   IN     NUMBER,
   P_ISSUES                IN     VARCHAR2,
   P_SOLUTIONS             IN     VARCHAR2,
   P_CUSTOMER_NAME         IN     VARCHAR2,
   P_ADDRESS               IN     VARCHAR2,
   P_COUNTER_ID            IN     NUMBER,
   P_USER_ID               IN     VARCHAR2,
   po_PKValue                 OUT NUMBER)
IS
   /******************************************************************************
      NAME:       USP_DAILYSERVICE_NEWCALL
      PURPOSE:    CALLING NEW CUSTOMER FOR SERVICE WITH NEW TOKEN

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        7/28/2018   KAMRUL       1. Created this procedure.
   ******************************************************************************/



   P_ROWCOUNT_CUSTOMER   NUMBER := 0;
   P_CUSTOMER_ID         NUMBER := 0;
BEGIN
   SELECT COUNT (1)
     INTO P_ROWCOUNT_CUSTOMER
     FROM TBLCUSTOMER C
    WHERE C.CONTACT_NO = P_CONTACT_NO;

   IF (P_ROWCOUNT_CUSTOMER > 0)
   THEN
      UPDATE TBLCUSTOMER
         SET customer_name = P_CUSTOMER_NAME, ADDRESS = P_ADDRESS
       WHERE CONTACT_NO = P_CONTACT_NO;
   ELSE
      INSERT INTO TBLCUSTOMER (customer_name,
                               ADDRESS,
                               CONTACT_NO,
                               customer_type_id)
           VALUES (P_CUSTOMER_NAME,
                   P_ADDRESS,
                   P_CONTACT_NO,
                   1);
   END IF;

   SELECT CUSTOMER_ID
     INTO P_CUSTOMER_ID
     FROM TBLCUSTOMER C
    WHERE C.CONTACT_NO = P_CONTACT_NO;

   UPDATE TBLTOKENQUEUE
      SET service_status_id = 5,
          contact_no = P_CONTACT_NO,
          COUNTER_ID = P_COUNTER_ID,
          USER_ID = P_USER_ID
    WHERE TOKEN_ID = P_TOKEN_ID;

   INSERT INTO TBLSERVICEDETAIL (token_id,
                                 customer_id,
                                 service_sub_type_id,
                                 issues,
                                 solutions,
                                 start_time,
                                 service_datetime,
                                 end_time)
        VALUES (P_TOKEN_ID,
                P_CUSTOMER_ID,
                P_SERVICE_SUB_TYPE_ID,
                P_ISSUES,
                P_SOLUTIONS,
                P_START_TIME,
                SYSDATE,
                SYSDATE);

   SELECT SERVICE_ID
     INTO po_PKValue
     FROM (  SELECT *
               FROM TBLSERVICEDETAIL
              WHERE TOKEN_ID = P_TOKEN_ID
           ORDER BY 1 DESC)
    WHERE ROWNUM <= 1;
END;
/


CREATE OR REPLACE PROCEDURE       USP_SERVICEDETAIL_MANUALCALL (
   P_BRANCH_ID        IN     NUMBER,
   P_COUNTER_ID       IN     NUMBER,
   P_USER_ID          IN     VARCHAR,
   P_TOKEN_NO         IN     NUMBER,
   PO_TOKEN_ID           OUT NUMBER,
   PO_CONTACT_NO         OUT VARCHAR2,
   PO_SERVICE_TYPE       OUT VARCHAR2,
   PO_START_TIME         OUT DATE,
   PO_CUSTOMER_NAME      OUT VARCHAR2,
   PO_ADDRESS            OUT VARCHAR2,
   PO_CURSOR             OUT SYS_REFCURSOR)
IS
   P_ROWCOUNT_TOKEN      NUMBER := 0;
   P_ROWCOUNT_CUSTOMER   NUMBER := 0;
   P_TOKEN_ID            NUMBER := 0;
   P_SERVICE_TYPE_ID     NUMBER := 0;
   P_CUSTOMER_NAME       VARCHAR2 (150);
   P_ADDRESS             VARCHAR2 (250);
   P_CONTACT_NO          VARCHAR2 (150);
   P_SERVICE_TYPE        VARCHAR2 (100);
/******************************************************************************
   NAME:       USP_DAILYSERVICE_NEWCALL
   PURPOSE:    CALLING NEW CUSTOMER FOR SERVICE WITH NEW TOKEN

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/28/2018   KAMRUL       1. Created this procedure.
******************************************************************************/



BEGIN
   SELECT COUNT (1)
     INTO P_ROWCOUNT_TOKEN
     FROM TBLTOKENQUEUE T
    WHERE    T.TOKEN_NO=P_TOKEN_NO
          AND T.BRANCH_ID=P_BRANCH_ID
          AND (T.SERVICE_STATUS_ID=1 OR T.SERVICE_STATUS_ID=4 OR T.SERVICE_STATUS_ID=2)
          AND TRUNC (T.service_date) = TRUNC (SYSDATE);

   DBMS_OUTPUT.PUT_LINE ('P_ROWCOUNT_TOKEN:' || P_ROWCOUNT_TOKEN);

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      SELECT T.TOKEN_ID,
           T.CONTACT_NO,
           S.SERVICE_TYPE_ID,
           S.SERVICE_TYPE_NAME
      INTO  P_TOKEN_ID,
             P_CONTACT_NO,
             P_SERVICE_TYPE_ID,
             P_SERVICE_TYPE
      FROM TBLTOKENQUEUE T
           INNER JOIN TBLSERVICETYPE S
              ON T.SERVICE_TYPE_ID = S.SERVICE_TYPE_ID
           LEFT JOIN TBLCUSTOMER CUST
              ON T.CONTACT_NO = CUST.CONTACT_NO
           LEFT JOIN TBLCUSTOMERTYPE CT
              ON CUST.CUSTOMER_TYPE_ID = CT.CUSTOMER_TYPE_ID
     WHERE  T.TOKEN_NO=P_TOKEN_NO
          AND T.BRANCH_ID=P_BRANCH_ID
          AND (T.SERVICE_STATUS_ID=1 OR T.SERVICE_STATUS_ID=4 OR T.SERVICE_STATUS_ID=3)
          AND TRUNC (T.service_date) = TRUNC (SYSDATE);
   END IF;

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      UPDATE TBLTOKENQUEUE
         SET service_status_id = 2,
             counter_id = P_COUNTER_ID,
             user_id = P_USER_ID
       WHERE token_id = P_TOKEN_ID;
   END IF;

--   IF (P_ROWCOUNT_TOKEN > 0)
--   THEN
--      UPDATE TBLDAILYBREAK
--         SET end_time = SYSDATE
--       WHERE user_id = P_USER_ID AND end_time IS NULL;
--   END IF;

   SELECT COUNT (1)
     INTO P_ROWCOUNT_CUSTOMER
     FROM TBLCUSTOMER
    WHERE contact_no = P_CONTACT_NO;

   IF (P_ROWCOUNT_TOKEN > 0 AND P_ROWCOUNT_CUSTOMER > 0)
   THEN
      SELECT customer_name, address
        INTO P_CUSTOMER_NAME, P_ADDRESS
        FROM TBLCUSTOMER
       WHERE contact_no = P_CONTACT_NO;
   END IF;

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      PO_TOKEN_ID := P_TOKEN_ID;
      PO_CONTACT_NO := P_CONTACT_NO;
      PO_SERVICE_TYPE := P_SERVICE_TYPE;
      PO_CUSTOMER_NAME := P_CUSTOMER_NAME;
      PO_ADDRESS := P_ADDRESS;
      PO_START_TIME := SYSDATE;

      DBMS_OUTPUT.PUT_LINE ('PO_CUSTOMER_NAME:' || PO_CUSTOMER_NAME);

      --SELECT PO_TOKEN_ID, PO_SERVICE_TYPE, PO_CONTACT_NO INTO TBL_USP_SERVICEDETAIL_NEWCALL FROM DUAL;

      OPEN PO_CURSOR FOR
         SELECT SST.*
           FROM TBLSERVICESUBTYPE SST
          WHERE SST.SERVICE_TYPE_ID = P_SERVICE_TYPE_ID;

      COMMIT;
   END IF;
END;
/


CREATE OR REPLACE PROCEDURE       USP_SERVICEDETAIL_NEWCALL (
   P_BRANCH_ID        IN     NUMBER,
   P_COUNTER_ID       IN     NUMBER,
   P_USER_ID          IN     VARCHAR,
   PO_TOKEN_ID           OUT NUMBER,
   PO_TOKEN_NO           OUT NUMBER,
   PO_CONTACT_NO         OUT VARCHAR2,
   PO_SERVICE_TYPE       OUT VARCHAR2,
   PO_START_TIME         OUT DATE,
   PO_CUSTOMER_NAME      OUT VARCHAR2,
   PO_ADDRESS            OUT VARCHAR2,
   PO_SERVICE_DATE       OUT DATE,
   PO_IS_BREAK_ASSIGNED  OUT NUMBER,
   PO_CURSOR             OUT SYS_REFCURSOR)
IS
   P_ROWCOUNT_TOKEN      NUMBER := 0;
   P_ROWCOUNT_CUSTOMER   NUMBER := 0;
   P_IS_BREAK_ASSIGNED     NUMBER := 0;
   P_TOKEN_ID            NUMBER := 0;
   P_SERVICE_TYPE_ID     NUMBER := 0;
   P_TOKEN_NO            NUMBER := 0;
   P_CUSTOMER_NAME       VARCHAR2 (150);
   P_ADDRESS             VARCHAR2 (250);
   P_SYSDATE             DATE:=SYSDATE;
   P_CONTACT_NO          VARCHAR2 (150);
   P_SERVICE_TYPE        VARCHAR2 (100);
   P_SERVICE_DATE        DATE;
/******************************************************************************
   NAME:       USP_DAILYSERVICE_NEWCALL
   PURPOSE:    CALLING NEW CUSTOMER FOR SERVICE WITH NEW TOKEN

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/28/2018   KAMRUL       1. Created this procedure.
******************************************************************************/



BEGIN
SELECT COUNT (1)
     INTO P_IS_BREAK_ASSIGNED
     FROM TBLDAILYBREAK
    WHERE user_id=P_USER_ID and 
    create_Time is not null and 
    start_time is null
    and TRUNC (create_Time) = TRUNC (P_SYSDATE);
    

     SELECT COUNT (1)
       INTO P_ROWCOUNT_TOKEN
       FROM TBLTOKENQUEUE T
      WHERE     (   (T.counter_id = P_COUNTER_ID AND (T.service_status_id = 3 OR T.service_status_id = 2))
                 OR (    T.counter_id IS NULL
                     AND T.service_status_id = 1
                     AND T.branch_id = P_BRANCH_ID))
            AND TRUNC (T.service_date) = TRUNC (P_SYSDATE);

   DBMS_OUTPUT.PUT_LINE ('P_ROWCOUNT_TOKEN:' || P_ROWCOUNT_TOKEN);

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      SELECT *
        INTO P_TOKEN_ID,
             P_TOKEN_NO,
             P_CONTACT_NO,
             P_SERVICE_DATE,
             P_SERVICE_TYPE_ID,
             P_SERVICE_TYPE
        FROM (  SELECT T.TOKEN_ID,
                       T.TOKEN_NO,
                       T.CONTACT_NO,
                       T.SERVICE_DATE,
                       S.SERVICE_TYPE_ID,
                       S.SERVICE_TYPE_NAME
                  FROM TBLTOKENQUEUE T
                       INNER JOIN TBLSERVICETYPE S
                          ON T.SERVICE_TYPE_ID = S.SERVICE_TYPE_ID
                       LEFT JOIN TBLCUSTOMER CUST ON T.CONTACT_NO = CUST.CONTACT_NO
                       LEFT JOIN TBLCUSTOMERTYPE CT ON CUST.CUSTOMER_TYPE_ID = CT.CUSTOMER_TYPE_ID                       
                 WHERE     (   (    T.counter_id = P_COUNTER_ID
                                AND (T.service_status_id = 3 OR T.service_status_id = 2))
                            OR (    T.counter_id IS NULL
                                AND T.service_status_id = 1
                                AND T.branch_id = P_BRANCH_ID))
                       AND TRUNC (T.service_date) = TRUNC (P_SYSDATE)
              ORDER BY T.service_status_id desc, NVL(CT.PRIORITY,99), T.token_NO ASC) TBL
       WHERE ROWNUM <= 1;
   END IF;

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      UPDATE TBLTOKENQUEUE
         SET service_status_id = 3,
         calltime=P_SYSDATE,
             counter_id = P_COUNTER_ID,
             user_id = P_USER_ID
       WHERE token_id = P_TOKEN_ID;
   END IF;

   IF (P_ROWCOUNT_TOKEN > 0 )
   THEN
   
      UPDATE TBLDAILYBREAK
         SET end_time = P_SYSDATE
       WHERE user_id = P_USER_ID AND end_time IS NULL AND start_time is not null;
   END IF;

   SELECT COUNT (1)
     INTO P_ROWCOUNT_CUSTOMER
     FROM TBLCUSTOMER
    WHERE contact_no = P_CONTACT_NO;

   IF (P_ROWCOUNT_TOKEN > 0 AND P_ROWCOUNT_CUSTOMER > 0)
   THEN
      SELECT customer_name, address
        INTO P_CUSTOMER_NAME, P_ADDRESS
        FROM TBLCUSTOMER
       WHERE contact_no = P_CONTACT_NO;
   END IF;

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      PO_TOKEN_ID := P_TOKEN_ID;
      PO_TOKEN_NO := P_TOKEN_NO;
      PO_CONTACT_NO := P_CONTACT_NO;
     
      PO_SERVICE_TYPE := P_SERVICE_TYPE;
      PO_CUSTOMER_NAME := P_CUSTOMER_NAME;
      PO_ADDRESS := P_ADDRESS;
       PO_SERVICE_DATE:=P_SERVICE_DATE;
       PO_IS_BREAK_ASSIGNED:=P_IS_BREAK_ASSIGNED;
      PO_START_TIME := P_SYSDATE;
      
      DBMS_OUTPUT.PUT_LINE ('PO_CUSTOMER_NAME:' || PO_CUSTOMER_NAME);

      --SELECT PO_TOKEN_ID, PO_SERVICE_TYPE, PO_CONTACT_NO INTO TBL_USP_SERVICEDETAIL_NEWCALL FROM DUAL;

      OPEN PO_CURSOR FOR
         SELECT SST.*
           FROM TBLSERVICESUBTYPE SST
          WHERE SST.SERVICE_TYPE_ID = P_SERVICE_TYPE_ID;

      COMMIT;
   END IF;
END;
/


CREATE OR REPLACE PROCEDURE    USP_ServiceDetail_SelectAll (
   P_BRANCH_ID       NUMBER,
   P_USER_ID         VARCHAR2,
   po_cursor     OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT sd.service_id,
             tq.token_id,
             tq.token_no,
             BR.BRANCH_NAME,
             CU.COUNTER_NO,
             au.UserName,
             cus.customer_id,
             cus.customer_name,
             CUS.contact_no,
             sd.issues,
             sd.solutions,
             sd.service_datetime,
             sd.start_time,
             sd.end_time,
             sst.service_sub_type_name
        FROM tblServiceDetail sd
             INNER JOIN tblTokenQueue tq ON tq.token_id = sd.token_id
             INNER JOIN TBLCOUNTER CU ON TQ.COUNTER_ID = CU.COUNTER_ID
             INNER JOIN TBLBRANCH BR ON TQ.BRANCH_ID = BR.BRANCH_ID
             INNER JOIN tblCustomer cus ON cus.customer_id = sd.customer_id
             INNER JOIN tblServiceSubType sst
                ON sst.service_sub_type_id = sd.service_sub_type_id
             INNER JOIN AspNetUsers au ON au.Id = tq.user_id
         WHERE     (P_BRANCH_ID IS NULL OR BR.BRANCH_ID = P_BRANCH_ID)
             AND (P_USER_ID IS NULL OR au.ID = P_USER_ID);
END;
/


CREATE OR REPLACE PROCEDURE    USP_ServiceDetail_SelectByCId (
   P_CUSTOMER_ID       NUMBER,
   po_cursor     OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT sd.service_id,
             tq.token_id,
             tq.token_no,
             BR.BRANCH_NAME,
             CU.COUNTER_NO,
             au.UserName,
             cus.customer_id,
             cus.customer_name,
             CUS.contact_no,
             sd.issues,
             sd.solutions,
             sd.service_datetime,
             sd.start_time,
             sd.end_time,
             sst.service_sub_type_name
        FROM tblServiceDetail sd
             INNER JOIN tblTokenQueue tq ON tq.token_id = sd.token_id
             INNER JOIN TBLCOUNTER CU ON TQ.COUNTER_ID = CU.COUNTER_ID
             INNER JOIN TBLBRANCH BR ON TQ.BRANCH_ID = BR.BRANCH_ID
             INNER JOIN tblCustomer cus ON cus.customer_id = sd.customer_id
             INNER JOIN tblServiceSubType sst
                ON sst.service_sub_type_id = sd.service_sub_type_id
             INNER JOIN AspNetUsers au ON au.Id = tq.user_id
         WHERE     cus.customer_id=P_CUSTOMER_ID;
END;
/


CREATE OR REPLACE PROCEDURE    USP_ServiceDetail_SelectCDate (
   P_BRANCH_ID       NUMBER,
   P_USER_ID         VARCHAR2,
   po_cursor     OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT sd.service_id,
             tq.token_id,
             tq.token_no,
             BR.BRANCH_NAME,
             CU.COUNTER_NO,
             au.UserName,
             cus.customer_id,
             cus.customer_name,
             CUS.contact_no,
             sd.issues,
             sd.solutions,
             sd.service_datetime,
             sd.start_time,
             sd.end_time,
             sst.service_sub_type_name
        FROM tblServiceDetail sd
             INNER JOIN tblTokenQueue tq ON tq.token_id = sd.token_id
             INNER JOIN TBLCOUNTER CU ON TQ.COUNTER_ID = CU.COUNTER_ID
             INNER JOIN TBLBRANCH BR ON TQ.BRANCH_ID = BR.BRANCH_ID
             INNER JOIN tblCustomer cus ON cus.customer_id = sd.customer_id
             INNER JOIN tblServiceSubType sst
                ON sst.service_sub_type_id = sd.service_sub_type_id
             INNER JOIN AspNetUsers au ON au.Id = tq.user_id
         WHERE     (P_BRANCH_ID IS NULL OR BR.BRANCH_ID = P_BRANCH_ID)
             AND (P_USER_ID IS NULL OR au.ID = P_USER_ID)
             AND TRUNC (sd.SERVICE_DATETIME) = TRUNC (SYSDATE);
END;
/


CREATE OR REPLACE PROCEDURE       USP_SERVICEDETAIL_TRANSFER (
   P_BRANCH_ID        IN     NUMBER,
   P_COUNTER_NO       IN     VARCHAR2,
   P_TOKEN_ID         IN     NUMBER)
IS
   P_ROWCOUNT_COUNTER      NUMBER := 0;
   P_ROWCOUNT_TOKEN      NUMBER := 0;
   P_COUNTER_ID          NUMBER:=0;

/******************************************************************************
   NAME:       USP_DAILYSERVICE_NEWCALL
   PURPOSE:    CALLING NEW CUSTOMER FOR SERVICE WITH NEW TOKEN

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        7/28/2018   KAMRUL       1. Created this procedure.
******************************************************************************/



BEGIN

    SELECT COUNT (1)
     INTO P_ROWCOUNT_COUNTER
     FROM TBLCOUNTER C
    WHERE     upper(C.COUNTER_NO) = upper(P_COUNTER_NO)
    AND C.BRANCH_ID=P_BRANCH_ID;
    
    IF(P_ROWCOUNT_COUNTER=0)
    THEN
        raise_application_error( -20001, 'Counter not found' );
    ELSE
        SELECT COUNTER_ID
         INTO P_COUNTER_ID
         FROM TBLCOUNTER C
        WHERE     upper(C.COUNTER_NO) = upper(P_COUNTER_NO)
        AND C.BRANCH_ID=P_BRANCH_ID;
    END IF;
    
   SELECT COUNT (1)
     INTO P_ROWCOUNT_TOKEN
     FROM TBLTOKENQUEUE T
    WHERE     T.TOKEN_ID = P_TOKEN_ID
          AND T.BRANCH_ID = P_BRANCH_ID
          AND (T.SERVICE_STATUS_ID = 3)
          AND TRUNC (T.service_date) = TRUNC (SYSDATE);

   DBMS_OUTPUT.PUT_LINE ('P_ROWCOUNT_TOKEN:' || P_ROWCOUNT_TOKEN);

  

   IF (P_ROWCOUNT_TOKEN > 0)
   THEN
      UPDATE TBLTOKENQUEUE
         SET 
             counter_id = P_COUNTER_ID,
             user_id=null,
             SERVICE_STATUS_ID = 2
       WHERE token_id = P_TOKEN_ID
       AND BRANCH_ID = P_BRANCH_ID
          AND (SERVICE_STATUS_ID = 3)
          AND TRUNC (service_date) = TRUNC (SYSDATE);
   END IF;

END;
/


CREATE OR REPLACE PROCEDURE USP_ServiceSubType_Delete
 
(
p_servicesub_type_id number 
)

IS

BEGIN
      DELETE FROM tblservicesubtype
      
           
     where service_sub_type_id=p_servicesub_type_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE USP_ServiceSubType_Insert
(p_servicesub_type_name varchar2,p_service_type_id number,p_max_duration number

, po_PKValue out number)

IS
Begin


 
INSERT INTO tblservicesubtype
           (service_sub_type_name,
           service_type_id,
           max_duration )
           
     VALUES
           (p_servicesub_type_name,
           p_service_type_id,p_max_duration
           );  
       
 select service_type_id into po_PKValue from tblservicesubtype 
 where service_sub_type_name=p_servicesub_type_name and service_type_id= p_service_type_id and max_duration=p_max_duration;   
End;
/


CREATE OR REPLACE PROCEDURE    USP_ServiceSubType_List_ById(
   p_servicesub_type_id       NUMBER,
   po_cursor              OUT SYS_REFCURSOR
   )
IS
BEGIN
   --open po_cursor for select * from tblservicetype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblservicesubtype
       WHERE service_sub_type_id = p_servicesub_type_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_ServiceSubType_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='Select sst.service_sub_type_id, st.service_type_name,sst.service_sub_type_name,sst.max_duration from tblServiceSubType sst
inner join tblServiceType st on  sst.service_type_id = st.service_type_id' ;
IF(quer IS NOT NULL) THEN

   open po_cursor for quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END IF;
END;
/


CREATE OR REPLACE PROCEDURE USP_ServiceSubType_Update
 
(p_servicesub_type_name varchar2,p_service_type_id number,p_max_duration number,
p_servicesub_type_id number
)

IS
Begin
Update  tblservicesubtype
           set service_sub_type_name = p_servicesub_type_name,
          max_duration=p_max_duration,
           service_type_id=p_service_type_id
     where service_sub_type_id = p_servicesub_type_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE USP_ServiceType_Delete
 
(
p_service_type_id number 
)

IS

BEGIN
      DELETE FROM tblServiceType
      
           
     where service_type_id=p_service_type_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE USP_ServiceType_Insert
 
(p_service_type_name varchar2,
po_PKValue out number)

IS
Begin
INSERT INTO tblServiceType
           (service_type_name)
           
     VALUES
           (p_service_type_name);
           select service_type_id into po_PKValue from tblServiceType 
 where service_type_name=p_service_type_name;      
End;
/


CREATE OR REPLACE PROCEDURE    USP_ServiceType_List_ById(
   p_service_type_id       NUMBER,
   po_cursor           OUT SYS_REFCURSOR
   )
IS
BEGIN
   --open po_cursor for select * from tblservicetype;
   OPEN po_cursor FOR
      SELECT *
        FROM tblServiceType
       WHERE service_type_id = p_service_type_id;
END;
/


CREATE OR REPLACE PROCEDURE USP_ServiceType_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='select * from tblservicetype' ;
BEGIN
   open po_cursor for select * from tblservicetype;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END;
END;
/


CREATE OR REPLACE PROCEDURE USP_ServiceType_Update
 
(p_service_type_name varchar2,
p_service_type_id number 
)

IS
Begin
Update  tblServiceType
           set service_type_name= p_service_type_name
           
     where service_type_id=p_service_type_id;
            
    
End;
/


CREATE OR REPLACE PROCEDURE    USP_SessionInfo_ByUserName (
   P_USER_NAME       VARCHAR2,
   po_cursor     OUT SYS_REFCURSOR)
IS
BEGIN
   --open po_cursor for select * from tblservicetype;

   OPEN po_cursor FOR
      SELECT U.ID USER_ID,
             U.Hometown USER_NAME,
             R.NAME ROLE_NAME,
             B.BRANCH_ID,
             B.BRANCH_NAME,
             B.STATIC_IP BRANCH_STATIC_IP
        FROM ASPNETROLES R
             INNER JOIN ASPNETUSERROLES UR ON R.ID = UR.ROLEID
             INNER JOIN ASPNETUSERS U ON UR.USERID = U.ID
             LEFT JOIN TBLBRANCHUSER BU ON U.ID = BU.USER_ID
             LEFT JOIN TBLBRANCH B ON BU.BRANCH_ID = B.BRANCH_ID
       WHERE U.USERNAME = P_USER_NAME;
END;
/


CREATE OR REPLACE PROCEDURE USP_Status_SelectAll
(
po_cursor OUT SYS_REFCURSOR
) is
quer varchar2(500) := ' ';
BEGIN
quer:='select * from tblServiceStatus' ;
IF(quer IS NOT NULL) THEN
   open po_cursor for quer;
   --open po_cursor for select 'dasdasd' Namee, 7 numberss from dual;
END IF;
END;
/


CREATE OR REPLACE PROCEDURE    USP_Token_Cancel (
    p_token_id  IN NUMBER,
    po_PKValue OUT NUMBER)
IS

BEGIN
   
    UPDATE TBLTOKENQUEUE
    SET
        SERVICE_STATUS_ID=4,
        CANCEL_TIME = SYSDATE
    WHERE  TOKEN_ID=p_token_id;
    
    SELECT TOKEN_NO INTO po_PKValue FROM TBLTOKENQUEUE WHERE TOKEN_ID=P_TOKEN_ID;

END;
/


CREATE OR REPLACE PROCEDURE    USP_Token_Insert (
   po_token_id         OUT NUMBER,
   po_token_no         OUT NUMBER,
   p_branch_id             NUMBER,
   p_service_type_id       NUMBER,
   p_contact_no            VARCHAR2)
IS
   token_no   NUMBER := 0;
   cust_count NUMBER:= 0;
BEGIN
   SELECT NVL (MAX (TOKEN_NO), 0)
     INTO token_no
     FROM tbltokenqueue T
    WHERE     T.BRANCH_ID = p_branch_id
          AND TRUNC (T.SERVICE_DATE) = TRUNC (SYSDATE);

   po_token_no := token_no + 1;

   SELECT COUNT(1) INTO CUST_COUNT FROM TBLCUSTOMER WHERE CONTACT_NO=p_contact_no;
   IF(CUST_COUNT=0)
   THEN
        INSERT INTO TBLCUSTOMER(CUSTOMER_NAME,CONTACT_NO)
        VALUES(p_contact_no,p_contact_no);
   END IF; -- NEED TO CHANGE HERE FOR API CALL TO UPDATE CUSTOMER INFORMATION FROM EXISTING SYSTEM

   INSERT INTO tbltokenqueue (BRANCH_ID,
                              SERVICE_TYPE_ID,
                              CONTACT_NO,
                              TOKEN_NO,
                              SERVICE_DATE,
                              SERVICE_STATUS_ID)
        VALUES (p_branch_id,
                p_service_type_id,
                p_contact_no,
                po_token_no,
                SYSDATE,
                1);

   SELECT TOKEN_ID
     INTO PO_TOKEN_ID
     FROM TBLTOKENQUEUE
    WHERE     TOKEN_NO = po_token_no
          AND BRANCH_ID = p_branch_id
          AND CONTACT_NO = p_contact_no
          AND service_type_id = p_service_type_id
          AND SERVICE_STATUS_ID = 1
          AND TRUNC (SERVICE_DATE) = TRUNC (SYSDATE);

   COMMIT;
END;
/


CREATE OR REPLACE PROCEDURE       USP_TOKEN_RE_ASSIGNTOME (
   P_token_id   IN     NUMBER,
   P_counter_id  IN     NUMBER)
IS
BEGIN

    UPDATE tblTokenQueue
    SET 
        service_status_id=2,
        CANCEL_TIME=NULL,
        COUNTER_ID=P_counter_id,
        USER_ID=NULL
        
    WHERE token_id = P_token_id
        AND service_status_id=4;
        --ORDER BY tokenid;
END;
/


CREATE OR REPLACE PROCEDURE       USP_TOKEN_RE_INITIATE (
   P_token_id   IN     NUMBER)
IS
BEGIN

    UPDATE tblTokenQueue
    SET 
        service_status_id=1,
        CANCEL_TIME=NULL,
        COUNTER_ID=NULL,
        USER_ID=NULL
    WHERE token_id = P_token_id
        AND service_status_id=4;
END;
/


CREATE OR REPLACE PROCEDURE    USP_Token_SelectAll (
   po_cursor   OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT tq.token_id,
             br.branch_name,
             tq.token_no,
             tq.service_date,
             st.service_status_id,
             st.service_status,
             tq.contact_no
        FROM tblTokenQueue tq
             INNER JOIN tblBranch br ON br.branch_id = tq.branch_id
             INNER JOIN tblServiceStatus st
                ON st.service_status_id = tq.service_status_id;
END;
/


CREATE OR REPLACE PROCEDURE    USP_TOKEN_SelectByBranchId (
   P_branch_id   IN     NUMBER,
   po_cursor        OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT tq.token_id,
             br.branch_name,
             tq.token_no,
             tq.service_date,
             st.service_status_id,
             st.service_status,
             tq.contact_no
        FROM tblTokenQueue tq
             INNER JOIN tblBranch br ON br.branch_id = tq.branch_id
             INNER JOIN tblServiceStatus st
                ON st.service_status_id = tq.service_status_id
       WHERE     (P_branch_id=0 or br.BRANCH_ID = P_branch_id)
             AND TRUNC (tq.SERVICE_DATE) = TRUNC (SYSDATE);
END;
/


CREATE OR REPLACE PROCEDURE    USP_TOKEN_SelectSkipped (
   P_branch_id   IN     NUMBER,
   P_USER_ID     IN     VARCHAR2,
   po_cursor        OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN po_cursor FOR
      SELECT tq.token_id,
             br.branch_name,
             tq.token_no,
             tq.service_date,
             st.service_status_id,
             st.service_status,
             tq.contact_no,
             CUS.CUSTOMER_NAME,
             tq.CANCEL_TIME,
             TC.COUNTER_NO,
             US.HOMETOWN
        FROM tblTokenQueue tq
             INNER JOIN tblBranch br ON br.branch_id = tq.branch_id
             INNER JOIN tblServiceStatus st
                ON st.service_status_id = tq.service_status_id
             INNER JOIN TBLCOUNTER TC ON TQ.COUNTER_ID = TC.COUNTER_ID
             INNER JOIN TBLCUSTOMER CUS ON TQ.CONTACT_NO = CUS.CONTACT_NO
             INNER JOIN ASPNETUSERS US ON TQ.USER_ID = US.ID
       WHERE     (P_BRANCH_ID IS NULL OR BR.BRANCH_ID = P_BRANCH_ID)
             AND (P_USER_ID IS NULL OR us.ID = P_USER_ID)
             AND TRUNC (tq.service_date) = TRUNC (SYSDATE)
             AND tq.service_status_id=4;
END;
/
